## step-1)
    --> Dream-Dwell>npm init -y
    --> Dream-Dwell>npm i express mongodb cors dotenv
## Step-2)
    --> Database > Connect > Drivers > View full code sample > copy > past
    --> Database Access > Add new database > password > user name > Auto generate secure password > copy > past in .env file
    --> built-in Role > read write > Add user 
## Step-3)
    --> Database > collections > create database > INSERT DOCUMENT > view {} > past the json data > Insert
    --> now create database and collection in index.js with same name which has been created manually in mongodb
    --> get reviews data from database
    --> your reviews data will be displayed in http://localhost:5000/v1/api/reviews
## Step-4)
    --> receive userInfo from client side
    --> At first check if the user already exist? _ _ _

            const query = {email: user.email}
            const existingUser = await usersCollection.findOne(query);

    --> If the user email already exist then return response to the client side _ _ _

            if(existingUser){
            return res.send({ message: 'user already exists', insertedId: null });
            }

    --> If the user email doesn't exist then insert into usersCollection and send response to the client side _ _ _

            const result = await usersCollection.insertOne(user);
            res.send(result);

## Step-5)
    --> retrieve user _id from query parameter_ _ _

            const id = req.params.id;

    --> Set query document as parameter inside deleteOne().It finds the user with the specified ID in the users array and deletes it if found. _ _ _

            here, query document = { _id: new ObjectId(id) }
            const result = await usersCollection.deleteOne({ _id: new ObjectId(id) });

## Step-6)
    --> retrieve user  _id from query parameter
    --> set _id as filter document _ _ _

            filter = { _id: new ObjectId(id) };

    --> set document to be updated _ _ _

            updatedDoc = { $set: {role: 'admin'} }

    --> then send updateOne request

            await usersCollection.updateOne(filter, updatedDoc)